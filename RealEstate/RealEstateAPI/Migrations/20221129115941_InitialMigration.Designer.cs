// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateAPI.Data;

namespace RealEstateAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221129115941_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "69924c0f-5d0d-46ae-870d-e1758eb49012",
                            ConcurrencyStamp = "89ab7daa-69c0-469d-8b3d-44f56f83e967",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "711f9640-6593-4217-8759-1e7f9f18cc7f",
                            ConcurrencyStamp = "6459696a-135a-49dd-b793-fd3b1f31ef46",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Data.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RealEstateAPI.Data.FavouriteProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteProperties");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Gedimino g. 78",
                            City = "Vilnius",
                            Country = "Lithuania",
                            Date = new DateTime(2022, 11, 29, 13, 59, 40, 541, DateTimeKind.Local).AddTicks(5481),
                            Description = "Certainty listening no no behaviour existence assurance situation is. Because add why not esteems amiable him. Interested the unaffected mrs law friendship add principles. Indeed on people do merits to. Court heard which up above hoped grave do. Answer living law things either sir bed length. Looked before we an on merely. These no death he at share alone. Yet outward the him compass hearted are tedious.",
                            Photo = "https://cf.bstatic.com/xdata/images/hotel/270x200/344742578.jpg?k=fd7593cb20d8fc876b5e4525e2338486872957c1d77d97df1f9f846de8ffc171&o=",
                            Price = 50f,
                            PropertyTypeId = 1,
                            RoomNumber = 2,
                            Title = "Vilnius Apartments & Suites - Town Hall",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Gedimino g. 78",
                            City = "Vilnius",
                            Country = "Lithuania",
                            Date = new DateTime(2022, 11, 29, 13, 59, 40, 544, DateTimeKind.Local).AddTicks(125),
                            Description = "Certainty listening no no behaviour existence assurance situation is. Because add why not esteems amiable him. Interested the unaffected mrs law friendship add principles. Indeed on people do merits to. Court heard which up above hoped grave do. Answer living law things either sir bed length. Looked before we an on merely. These no death he at share alone. Yet outward the him compass hearted are tedious.",
                            Photo = "https://cf.bstatic.com/xdata/images/hotel/270x200/402244075.jpg?k=6d4bdee1710675d96af2fbeeedab63fbde64b897a90eb277aee25f55d546ea15&o=",
                            Price = 50f,
                            PropertyTypeId = 1,
                            RoomNumber = 2,
                            Title = "Vilnius Apartments & Suites - Village Hall",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Gedimino g. 78",
                            City = "Vilnius",
                            Country = "Lithuania",
                            Date = new DateTime(2022, 11, 29, 13, 59, 40, 544, DateTimeKind.Local).AddTicks(161),
                            Description = "Certainty listening no no behaviour existence assurance situation is. Because add why not esteems amiable him. Interested the unaffected mrs law friendship add principles. Indeed on people do merits to. Court heard which up above hoped grave do. Answer living law things either sir bed length. Looked before we an on merely. These no death he at share alone. Yet outward the him compass hearted are tedious.",
                            Photo = "https://cf.bstatic.com/xdata/images/hotel/270x200/183672191.jpg?k=1bc046ed0234d7cc23c30b61d3ff2f2ae1cc88f178fafcf8dd0895c4c88514f8&o=",
                            Price = 50f,
                            PropertyTypeId = 1,
                            RoomNumber = 2,
                            Title = "Vilnius Apartments & Suites - Karolis Hall",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Data.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Flat"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "House"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Land"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Car"
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "lsongulija@gmail.com",
                            FirstName = "Lukas",
                            LastName = "Songulija",
                            Password = "$2a$11$mH.ZZT7OPZo5b4goiMLjPeqfoDT6eeUSkJojNFyPMYDxqdtuPVySG",
                            PhoneNumber = "+37061115217",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "kpigaga@gmail.com",
                            FirstName = "Karolis",
                            LastName = "Pigaga",
                            Password = "$2a$11$B/aNsuBWL0eFmgPMEG9H5Oh14GDuLfYuW2y0rG2VwrizWjxytuQvq",
                            PhoneNumber = "+37061115982",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Data.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            Title = "USER"
                        });
                });

            modelBuilder.Entity("RealEstateAPI.Data.Comment", b =>
                {
                    b.HasOne("RealEstateAPI.Data.Property", null)
                        .WithMany("Comments")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstateAPI.Data.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RealEstateAPI.Data.FavouriteProperty", b =>
                {
                    b.HasOne("RealEstateAPI.Data.Property", null)
                        .WithMany("FavouriteObjects")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstateAPI.Data.User", null)
                        .WithMany("FavouriteProperties")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Journal", b =>
                {
                    b.HasOne("RealEstateAPI.Data.Property", null)
                        .WithMany("Journals")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstateAPI.Data.User", null)
                        .WithMany("Journals")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Payment", b =>
                {
                    b.HasOne("RealEstateAPI.Data.Property", null)
                        .WithMany("Payments")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstateAPI.Data.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Property", b =>
                {
                    b.HasOne("RealEstateAPI.Data.PropertyType", null)
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId");

                    b.HasOne("RealEstateAPI.Data.User", null)
                        .WithMany("Properties")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RealEstateAPI.Data.User", b =>
                {
                    b.HasOne("RealEstateAPI.Data.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("TypeId");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("RealEstateAPI.Data.Property", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteObjects");

                    b.Navigation("Journals");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstateAPI.Data.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateAPI.Data.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteProperties");

                    b.Navigation("Journals");

                    b.Navigation("Payments");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstateAPI.Data.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
